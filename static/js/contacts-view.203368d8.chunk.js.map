{"version":3,"sources":["../node_modules/shortid/lib/alphabet.js","../node_modules/shortid/index.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js","components/ContactForm/ContactForm.module.css","components/ContactListItem/ContactListItem.module.css","components/ContactList/ContactList.module.css","components/FilterContacts/FilterContacts.module.css","components/ContactForm/ContactForm.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","components/FilterContacts/FilterContacts.js","views/ContactsPage/ContactsPage.js"],"names":["alphabet","previousSeed","shuffled","randomFromSeed","require","ORIGINAL","reset","setCharacters","_alphabet_","length","Error","unique","split","filter","item","ind","arr","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","push","splice","shuffle","module","exports","get","characters","seed","lookup","index","build","isValid","clusterWorkerId","generate","seedValue","worker","workerId","newCharacters","undefined","_seed_","counter","previousSeconds","str","seconds","Date","now","random","format","number","done","loopCounter","pow","randomByte","crypto","window","msCrypto","getRandomValues","size","Uint8Array","bytes","i","mask","log","LN2","step","id","RegExp","replace","test","ContactForm","state","name","props","nameInputId","shortid","numberInputId","handleContactAdd","e","currentTarget","value","setState","checkingAnExistingContact","contacts","some","contact","toLowerCase","alert","onSubmit","handlesubmit","preventDefault","this","className","styles","form","htmlFor","property","type","pattern","title","required","input","onChange","button","Component","defaultProps","connect","contactsSelectors","getAllContacts","dispatch","contactsOperations","saveContact","ContactListItem","onDeleteContact","onClick","getfilteredContacts","contactId","deleteContact","contactList","map","getfilter","updateFilter","target","filterName","ContactsPage","fetchContacts","isLoadingContacts","getLoading"],"mappings":"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","file":"static/js/contacts-view.203368d8.chunk.js","sourcesContent":["'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nmodule.exports = 0;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1cmGk\",\"property\":\"ContactForm_property__2D_-s\",\"input\":\"ContactForm_input___m2Lu\",\"button\":\"ContactForm_button__B_p0x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ContactListItem_button__14ZrL\",\"item\":\"ContactListItem_item__ICLuz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__3hdEp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterName\":\"FilterContacts_filterName__3P8tB\",\"input\":\"FilterContacts_input__3psrm\"};","import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport shortid from 'shortid';\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport {contactsSelectors, contactsOperations} from '../../redux/contacts';\r\n\r\nimport styles from \"./ContactForm.module.css\"\r\n\r\n\r\nclass ContactForm extends Component {\r\n    static defaultProps = {\r\n        name: '',\r\n        number: ''\r\n    };\r\n\r\n    static propTypes = {\r\n        name: PropTypes.string,\r\n        number: PropTypes.string,\r\n    };\r\n\r\n    state = {\r\n        name: this.props.name,\r\n        number: this.props.number,\r\n    }\r\n\r\n    nameInputId = shortid.generate();\r\n    numberInputId = shortid.generate();\r\n\r\n    handleContactAdd = e => {\r\n        const { name, value } = e.currentTarget;\r\n        this.setState({ [name]: value });\r\n    }\r\n\r\n    checkingAnExistingContact = (state, contacts) => {\r\n        const { name, number } = state;\r\n        if (contacts.some(contact => contact.name.toLowerCase() === name.toLowerCase())) {\r\n            alert(`${name} is already in contacts`)\r\n            return;\r\n    }\r\n\r\n        if (contacts.some(contact => contact.number === number)) {\r\n            alert(`${number} is already in contacts under a different name`)\r\n            return;\r\n        }\r\n        this.props.onSubmit(state);\r\n    }\r\n\r\n    handlesubmit = e => {\r\n        e.preventDefault();\r\n        this.checkingAnExistingContact(this.state, this.props.contacts);\r\n        this.reset()\r\n    }\r\n    reset = () => {\r\n        this.setState({ name: \"\", number: \"\" });\r\n    };\r\n\r\n    render() {\r\n        const { name, number } = this.state;\r\n\r\n        return (\r\n            <form onSubmit={this.handlesubmit} className={styles.form}>\r\n                <label htmlFor={this.nameInputId} className={styles.property}>\r\n                    <span>Name</span>\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        value={name}\r\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                        required\r\n                        className={styles.input}\r\n                        onChange={this.handleContactAdd}\r\n                        id={this.nameInputId}\r\n                    />\r\n                </label>\r\n                <label htmlFor={this.numberInputId} className={styles.property}>\r\n                    <span>Number</span>\r\n                    <input\r\n                        type=\"tel\"\r\n                        name=\"number\"\r\n                        value={number}\r\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                        required\r\n                        className={styles.input}\r\n                        onChange={this.handleContactAdd}\r\n                        id={this.numberInputId}\r\n                    />\r\n                </label>\r\n                <button type=\"submit\" className={styles.button}>\r\n                    Add contact\r\n                </button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    contacts: contactsSelectors.getAllContacts(state),\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onSubmit: (name, number) => dispatch(contactsOperations.saveContact(name, number))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import React from \"react\";\r\nimport styles from \"../ContactListItem/ContactListItem.module.css\";\r\n\r\n\r\nconst ContactListItem = ({contact:{name,number,id},onDeleteContact}) => (\r\n    <li className={styles.item}>\r\n        <span>{name}: {number}</span>\r\n        <button\r\n          type=\"button\"\r\n          className={styles.button}\r\n          onClick={() => onDeleteContact(id)}\r\n        >\r\n          Delete\r\n        </button>\r\n    </li>\r\n)\r\n\r\nexport default ContactListItem","import React from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport ContactListItem from \"../ContactListItem\"\r\n\r\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\r\n\r\nimport styles from \"./ContactList.module.css\";\r\n\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => (\r\n    <ul className={styles.contactList}>\r\n        {contacts.map((contact) => (\r\n            <ContactListItem key={contact.id} contact={contact} onDeleteContact={onDeleteContact} />\r\n        ))}\r\n    </ul>\r\n)\r\n\r\nContactList.propTypes = {\r\n    contacts: PropTypes.arrayOf(PropTypes.shape({\r\n        id: PropTypes.string.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        number: PropTypes.string.isRequired,\r\n    })).isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    contacts: contactsSelectors.getfilteredContacts(state),\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => (\r\n    {\r\n        onDeleteContact: (contactId) => dispatch(contactsOperations.deleteContact(contactId)),\r\n    }\r\n)\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { contactsSelectors, updateFilter  } from '../../redux/contacts';\r\n\r\nimport styles from \"./FilterContacts.module.css\";\r\n\r\n\r\nconst FilterContacts = ({ value, onChange }) => (\r\n    <label className={styles.filterName}>\r\n        Filter by name\r\n        <input type=\"text\" value={value} onChange={onChange} className={styles.input} />\r\n    </label>\r\n)\r\nconst mapStateToProps = state => ({\r\n    value: contactsSelectors.getfilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onChange: (e) => dispatch(updateFilter(e.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FilterContacts)","import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport ContactForm from \"../../components/ContactForm\";\r\nimport ContactList from \"../../components/ContactList\";\r\nimport FilterContacts from \"../../components/FilterContacts\";\r\nimport Loading from \"../../components/Loader\";\r\n\r\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\r\n\r\n\r\n\r\nclass ContactsPage extends Component {\r\n  static propTypes = {\r\n    contacts: PropTypes.array,\r\n    filter: PropTypes.string,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <ContactForm />\r\n        <FilterContacts />\r\n        {this.props.isLoadingContacts && <Loading />}\r\n        <ContactList />\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isLoadingContacts: contactsSelectors.getLoading(state),\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts())\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsPage);\r\n\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}